#!/usr/bin/env python3
import secrets, hashlib, json
from pathlib import Path
from datetime import datetime

OUT_DIR = Path(".")
NUM_KEYS = 1000            # change to how many you want
PREFIX = "INSPECTO-PRO-2025"
ALPHABET = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"  # no ambiguous chars

def make_token(groups=(4,4)):
    return "-".join("".join(secrets.choice(ALPHABET) for _ in range(g)) for g in groups)

def make_key():
    return f"{PREFIX}-{make_token()}"

def sha256_hex(s: str) -> str:
    import hashlib
    return hashlib.sha256(s.encode("utf-8")).hexdigest()

def main():
    keys = []
    seen = set()
    while len(keys) < NUM_KEYS:
        k = make_key()
        if k not in seen:
            seen.add(k)
            keys.append(k)

    # write plain master list (keep offline)
    ts = datetime.utcnow().isoformat()
    with open(OUT_DIR / "keys_plain.txt", "w", encoding="utf-8") as f:
        f.write(f"# Generated: {ts}\n")
        for k in keys:
            f.write(k + "\n")

    # write plain copy for manual distribution
    with open(OUT_DIR / "keys_for_manual_distribution.txt", "w", encoding="utf-8") as f:
        for k in keys:
            f.write(k + "\n")

    # write python file with hashes (safe to bundle)
    with open(OUT_DIR / "valid_key_hashes.py", "w", encoding="utf-8") as f:
        f.write("# autogenerated valid key hashes\n")
        f.write("VALID_KEY_HASHES = [\n")
        for k in keys:
            f.write(f'    "{sha256_hex(k)}",\n')
        f.write("]\n")

    print("Wrote keys_plain.txt, keys_for_manual_distribution.txt, valid_key_hashes.py")

if __name__ == '__main__':
    main()
